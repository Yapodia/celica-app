#!/usr/bin/env python3
"""
Script d'initialisation des donn√©es de journalisation et surveillance
pour le tableau de bord administrateur
"""

import os
import sys
import django
from datetime import datetime, timedelta
import random

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'celica_app.settings')
django.setup()

from celica_web.models import Test, Utilisateur, TestEventLog, SecurityViolation, Module
from django.utils import timezone

def init_logging_data():
    """Initialise les donn√©es de journalisation pour le tableau de bord"""
    print("üöÄ INITIALISATION DES DONN√âES DE JOURNALISATION")
    print("=" * 60)
    
    # 1. V√©rifier/cr√©er les donn√©es de base
    print("\n1. V√©rification des donn√©es de base...")
    
    # R√©cup√©rer ou cr√©er un utilisateur de test
    try:
        user = Utilisateur.objects.filter(role='apprenant').first()
        if not user:
            user = Utilisateur.objects.create_user(
                email='test@example.com',
                matricule='TEST001',
                password='testpass123',
                first_name='Test',
                last_name='User',
                role='apprenant'
            )
            print(f"‚úÖ Utilisateur cr√©√©: {user.email}")
        else:
            print(f"‚úÖ Utilisateur existant: {user.email}")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation utilisateur: {e}")
        return
    
    # R√©cup√©rer ou cr√©er un module
    try:
        module = Module.objects.filter(status='actif').first()
        if not module:
            module = Module.objects.create(
                intitule='Module Test',
                description='Module pour les tests de journalisation',
                categorie='Test',
                status='actif'
            )
            print(f"‚úÖ Module cr√©√©: {module.intitule}")
        else:
            print(f"‚úÖ Module existant: {module.intitule}")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation module: {e}")
        return
    
    # R√©cup√©rer ou cr√©er un test
    try:
        test = Test.objects.filter(module=module).first()
        if not test:
            test = Test.objects.create(
                titre='Test de Journalisation',
                description='Test pour d√©montrer la journalisation',
                module=module,
                instructeur=user,
                duree=30,
                bareme=20
            )
            print(f"‚úÖ Test cr√©√©: {test.titre}")
        else:
            print(f"‚úÖ Test existant: {test.titre}")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation test: {e}")
        return
    
    # 2. Cr√©er des √©v√©nements de test r√©cents
    print("\n2. Cr√©ation d'√©v√©nements de test...")
    
    event_types = [
        'test_start', 'test_end', 'question_view', 'question_answer',
        'page_focus', 'page_blur', 'auto_save', 'manual_save'
    ]
    
    # Cr√©er des √©v√©nements sur les 7 derniers jours
    for day in range(7):
        date = timezone.now() - timedelta(days=day)
        
        # 2-5 √©v√©nements par jour
        num_events = random.randint(2, 5)
        
        for i in range(num_events):
            # Heure al√©atoire dans la journ√©e
            hour = random.randint(9, 18)
            minute = random.randint(0, 59)
            event_time = date.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            event_type = random.choice(event_types)
            
            TestEventLog.objects.create(
                test=test,
                utilisateur=user,
                event_type=event_type,
                event_data={
                    'demo': True,
                    'day': day,
                    'event_num': i
                },
                timestamp=event_time,
                ip_address='127.0.0.1',
                user_agent='Demo Script'
            )
        
        print(f"   üìÖ Jour {day+1}: {num_events} √©v√©nements cr√©√©s")
    
    # 3. Cr√©er des violations de s√©curit√©
    print("\n3. Cr√©ation de violations de s√©curit√©...")
    
    violation_types = [
        'copy_paste', 'keyboard_shortcut', 'right_click', 'print',
        'navigation', 'dev_tools', 'tab_switch', 'fullscreen_exit'
    ]
    
    # Cr√©er des violations sur les 3 derniers jours
    for day in range(3):
        date = timezone.now() - timedelta(days=day)
        
        # 1-3 violations par jour
        num_violations = random.randint(1, 3)
        
        for i in range(num_violations):
            hour = random.randint(10, 17)
            minute = random.randint(0, 59)
            violation_time = date.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            violation_type = random.choice(violation_types)
            
            SecurityViolation.objects.create(
                utilisateur=user,
                violation=f"Violation de type {violation_type} d√©tect√©e",
                violation_type=violation_type,
                url=f'/test/passer/{test.id}/',
                timestamp=violation_time,
                ip_address='127.0.0.1',
                user_agent='Demo Script'
            )
        
        print(f"   üö® Jour {day+1}: {num_violations} violations cr√©√©es")
    
    # 4. Cr√©er des √©v√©nements de violation dans TestEventLog
    print("\n4. Cr√©ation d'√©v√©nements de violation...")
    
    violations = SecurityViolation.objects.all()
    for violation in violations:
        TestEventLog.objects.create(
            test=test,
            utilisateur=user,
            event_type='violation_detected',
            event_data={
                'violation_type': violation.violation_type,
                'violation_id': violation.id,
                'demo': True
            },
            timestamp=violation.timestamp,
            ip_address='127.0.0.1',
            user_agent='Demo Script'
        )
    
    print(f"   üìù {violations.count()} √©v√©nements de violation cr√©√©s")
    
    # 5. Afficher les statistiques finales
    print("\n5. Statistiques finales...")
    
    total_events = TestEventLog.objects.count()
    total_violations = SecurityViolation.objects.count()
    events_30_days = TestEventLog.objects.filter(
        timestamp__gte=timezone.now() - timedelta(days=30)
    ).count()
    violations_30_days = SecurityViolation.objects.filter(
        timestamp__gte=timezone.now() - timedelta(days=30)
    ).count()
    
    print(f"üìä Total √©v√©nements: {total_events}")
    print(f"üìä Total violations: {total_violations}")
    print(f"üìä √âv√©nements (30j): {events_30_days}")
    print(f"üìä Violations (30j): {violations_30_days}")
    
    # 6. Afficher les types d'√©v√©nements les plus fr√©quents
    print("\n6. Types d'√©v√©nements les plus fr√©quents:")
    from django.db.models import Count
    event_stats = TestEventLog.objects.values('event_type').annotate(
        count=Count('id')
    ).order_by('-count')[:5]
    
    for stat in event_stats:
        print(f"   - {stat['event_type']}: {stat['count']}")
    
    # 7. Afficher les types de violations les plus fr√©quents
    print("\n7. Types de violations les plus fr√©quents:")
    violation_stats = SecurityViolation.objects.values('violation_type').annotate(
        count=Count('id')
    ).order_by('-count')[:5]
    
    for stat in violation_stats:
        print(f"   - {stat['violation_type']}: {stat['count']}")
    
    print("\n‚úÖ Initialisation termin√©e avec succ√®s!")
    print("\nüìã Prochaines √©tapes:")
    print("   1. Acc√©der au tableau de bord: http://127.0.0.1:8000/login/admindashboard/")
    print("   2. V√©rifier la section 'Journalisation et surveillance'")
    print("   3. Cliquer sur 'D√©tails' pour voir les statistiques")
    print("   4. Cliquer sur 'Voir d√©tails' dans 'Activit√© r√©cente'")
    print("\nüîß Pour nettoyer les donn√©es de test:")
    print("   python manage.py shell")
    print("   >>> from celica_web.models import TestEventLog, SecurityViolation")
    print("   >>> TestEventLog.objects.filter(event_data__demo=True).delete()")
    print("   >>> SecurityViolation.objects.filter(user_agent='Demo Script').delete()")

if __name__ == '__main__':
    try:
        init_logging_data()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Initialisation interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur lors de l'initialisation: {e}")
        import traceback
        traceback.print_exc() 