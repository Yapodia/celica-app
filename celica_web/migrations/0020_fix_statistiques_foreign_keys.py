# Generated by Django 5.2.1 on 2025-07-01 12:26

from django.db import migrations


def fix_foreign_keys_and_finish_cleanup(apps, schema_editor):
    """
    Termine le nettoyage de la table statistiques en supprimant les contraintes FK et colonnes restantes
    """
    with schema_editor.connection.cursor() as cursor:
        print("üîß Finalisation du nettoyage de la table celica_web_statistiques...")
        
        # 1. Lister toutes les contraintes de cl√© √©trang√®re sur la table
        cursor.execute("""
            SELECT CONSTRAINT_NAME, COLUMN_NAME
            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_statistiques'
            AND REFERENCED_TABLE_NAME IS NOT NULL
        """)
        
        foreign_keys = cursor.fetchall()
        
        # 2. Supprimer les contraintes de cl√© √©trang√®re li√©es aux colonnes que nous voulons supprimer
        for fk_name, column_name in foreign_keys:
            if column_name in ['groupe_id', 'module_id']:
                try:
                    cursor.execute(f"""
                        ALTER TABLE celica_web_statistiques 
                        DROP FOREIGN KEY {fk_name}
                    """)
                    print(f"‚úÖ Contrainte FK '{fk_name}' supprim√©e pour colonne '{column_name}'")
                except Exception as e:
                    print(f"‚ÑπÔ∏è  Contrainte FK '{fk_name}' d√©j√† supprim√©e ou erreur: {e}")
        
        # 3. Supprimer les colonnes obsol√®tes restantes
        obsolete_columns = ['groupe_id', 'module_id']
        
        for col in obsolete_columns:
            cursor.execute("""
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = DATABASE()
                AND TABLE_NAME = 'celica_web_statistiques'
                AND COLUMN_NAME = '{}'
            """.format(col))
            
            if cursor.fetchone()[0] > 0:
                try:
                    cursor.execute("""
                        ALTER TABLE celica_web_statistiques 
                        DROP COLUMN {}
                    """.format(col))
                    print(f"‚úÖ Colonne obsol√®te '{col}' supprim√©e")
                except Exception as e:
                    print(f"‚ÑπÔ∏è  Erreur suppression colonne '{col}': {e}")
        
        # 4. V√©rifier que les colonnes score_moyen et score_median existent
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_statistiques'
            AND COLUMN_NAME = 'score_moyen'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_statistiques 
                ADD COLUMN score_moyen DOUBLE NULL
            """)
            print("‚úÖ Colonne 'score_moyen' ajout√©e")
        
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_statistiques'
            AND COLUMN_NAME = 'score_median'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_statistiques 
                ADD COLUMN score_median DOUBLE NULL
            """)
            print("‚úÖ Colonne 'score_median' ajout√©e")
        
        print("üéØ Nettoyage final de la table celica_web_statistiques termin√©!")


def reverse_fix_foreign_keys_and_finish_cleanup(apps, schema_editor):
    """
    Fonction de rollback (optionnelle)
    """
    print("‚ö†Ô∏è  Rollback du nettoyage final Statistiques non impl√©ment√©")


class Migration(migrations.Migration):

    dependencies = [
        ('celica_web', '0019_fix_statistiques_columns'),
    ]

    operations = [
        migrations.RunPython(
            fix_foreign_keys_and_finish_cleanup,
            reverse_fix_foreign_keys_and_finish_cleanup,
        ),
    ]
