# Generated by Django 5.1.7 on 2025-06-19 09:07

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='APropos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(help_text="Version de l'application", max_length=20)),
                ('nom_application', models.CharField(default='CelicaWeb', max_length=100)),
                ('description', models.TextField()),
                ('organisme', models.CharField(default='ASECNA', max_length=200)),
                ('contact_email', models.EmailField(default='admin@celicaweb.com', help_text='Email de contact principal', max_length=254)),
                ('contact_telephone', models.CharField(blank=True, max_length=20, null=True)),
                ('adresse', models.TextField(blank=True, null=True)),
                ('site_web', models.URLField(blank=True, null=True)),
                ('mentions_legales', models.TextField(blank=True, null=True)),
                ('politique_confidentialite', models.TextField(blank=True, null=True)),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True)),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'À propos',
                'verbose_name_plural': 'À propos',
            },
        ),
        migrations.CreateModel(
            name='Groupe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('code', models.CharField(blank=True, help_text='Code unique du groupe', max_length=20, unique=True)),
                ('capacite_max', models.PositiveIntegerField(default=30)),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('actif', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Groupe',
                'verbose_name_plural': 'Groupes',
                'ordering': ['nom'],
                'permissions': [('gerer_groupes', 'Peut gérer les groupes'), ('consulter_groupes', 'Peut consulter les groupes')],
            },
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('matricule', models.CharField(max_length=20, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('instructeur', 'Instructeur'), ('apprenant', 'Apprenant'), ('visiteur', 'Visiteur')], default='apprenant', max_length=20)),
                ('statut', models.CharField(choices=[('actif', 'Actif'), ('inactif', 'Inactif'), ('suspendu', 'Suspendu')], default='actif', max_length=10)),
                ('specialite', models.CharField(choices=[('RSI', 'RSI'), ('CNS', 'CNS'), ('ELB', 'ELB'), ('MIXTE', 'MIXTE')], default='MIXTE', max_length=20)),
                ('niveau', models.CharField(blank=True, choices=[('debutant', 'Débutant'), ('intermediaire', 'Intermédiaire'), ('avance', 'Avancé')], max_length=50, null=True)),
                ('date_preinscription', models.DateTimeField(blank=True, null=True)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('qualifications', models.TextField(blank=True, max_length=500, null=True)),
                ('derniere_connexion', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('groupes', models.ManyToManyField(blank=True, related_name='groupes_apprenant', to='celica_web.groupe')),
            ],
            options={
                'permissions': [('gerer_utilisateurs', 'Peut gérer les utilisateurs'), ('gerer_notifications', 'Peut gérer les notifications'), ('consulter_notifications', 'Peut consulter les notifications'), ('acceder_aide', "Peut accéder à l'aide"), ('gerer_tests', 'Peut gérer les tests'), ('gerer_questions', 'Peut gérer les questions'), ('gerer_cours', 'Peut gérer les cours'), ('gerer_modules', 'Peut gérer les modules'), ('gerer_plannings', 'Peut gérer les plannings'), ('gerer_groupes', 'Peut gérer les groupes'), ('passer_tests', 'Peut passer des tests'), ('consulter_resultats', 'Peut consulter les résultats'), ('consulter_cours', 'Peut consulter les cours')],
            },
        ),
        migrations.CreateModel(
            name='Administrateur',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('celica_web.utilisateur',),
        ),
        migrations.CreateModel(
            name='Apprenant',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('celica_web.utilisateur',),
        ),
        migrations.CreateModel(
            name='Instructeur',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('celica_web.utilisateur',),
        ),
        migrations.CreateModel(
            name='Visiteur',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('celica_web.utilisateur',),
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intitule', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('categorie', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('actif', 'Actif'), ('inactif', 'Inactif'), ('maintenance', 'En maintenance')], default='actif', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groupes', models.ManyToManyField(blank=True, related_name='modules', to='celica_web.groupe')),
                ('instructeur_principal', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['instructeur', 'admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modules_principaux', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Module',
                'verbose_name_plural': 'Modules',
                'ordering': ['intitule'],
                'permissions': [('gerer_modules', 'Peut gérer les modules'), ('consulter_modules', 'Peut consulter les modules')],
            },
        ),
        migrations.CreateModel(
            name='Cours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('contenu', models.TextField(blank=True, null=True)),
                ('fichier', models.FileField(blank=True, help_text='Fichier du cours (PDF, DOC, etc.)', null=True, upload_to='cours/fichiers/')),
                ('status', models.CharField(choices=[('actif', 'Actif'), ('inactif', 'Inactif'), ('brouillon', 'Brouillon'), ('archive', 'Archivé')], default='brouillon', help_text='Statut du cours', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date_cloture', models.DateTimeField(blank=True, null=True)),
                ('instructeur', models.ForeignKey(limit_choices_to={'role__in': ['instructeur', 'admin']}, on_delete=django.db.models.deletion.CASCADE, related_name='cours_crees', to=settings.AUTH_USER_MODEL)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cours', to='celica_web.module')),
            ],
            options={
                'verbose_name': 'Cours',
                'verbose_name_plural': 'Cours',
                'ordering': ['-created_at'],
                'permissions': [('gerer_cours', 'Peut gérer les cours'), ('consulter_cours', 'Peut consulter les cours')],
            },
        ),
        migrations.CreateModel(
            name='Aide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200)),
                ('contenu', models.TextField()),
                ('categorie', models.CharField(choices=[('general', 'Aide générale'), ('navigation', 'Navigation'), ('tests', 'Gestion des tests'), ('cours', 'Gestion des cours'), ('resultats', 'Consultation des résultats'), ('technique', 'Support technique')], default='general', max_length=20)),
                ('mots_cles', models.CharField(blank=True, help_text='Mots-clés pour la recherche, séparés par des virgules', max_length=200)),
                ('ordre_affichage', models.PositiveIntegerField(default=1)),
                ('visible', models.BooleanField(default=True)),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('module', models.ForeignKey(blank=True, help_text='Module spécifique concerné (optionnel)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='aides', to='celica_web.module')),
            ],
            options={
                'verbose_name': 'Aide',
                'verbose_name_plural': 'Aides',
                'ordering': ['categorie', 'ordre_affichage'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enonce', models.TextField(help_text='Énoncé de la question')),
                ('type_question', models.CharField(choices=[('QCM', 'Question à choix multiples'), ('QRL', 'Question à réponse libre')], default='QCM', max_length=10)),
                ('niveau_difficulte', models.CharField(choices=[('facile', 'Facile'), ('moyen', 'Moyen'), ('difficile', 'Difficile')], default='moyen', max_length=20)),
                ('ponderation', models.FloatField(default=1.0, help_text='Points attribués à cette question', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('image', models.ImageField(blank=True, help_text="Image d'illustration (optionnel)", null=True, upload_to='questions/images/')),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('nombre_utilisations', models.PositiveIntegerField(default=0, help_text='Nombre de fois que cette question a été utilisée')),
                ('instructeur', models.ForeignKey(blank=True, help_text='Instructeur qui a créé cette question', limit_choices_to={'role__in': ['instructeur', 'admin']}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions_creees', to=settings.AUTH_USER_MODEL)),
                ('module', models.ForeignKey(blank=True, help_text='Module auquel appartient cette question', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='celica_web.module')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ['-date_creation'],
                'permissions': [('gerer_questions', 'Peut gérer les questions'), ('consulter_questions', 'Peut consulter les questions')],
            },
        ),
        migrations.CreateModel(
            name='Reponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('texte', models.TextField(help_text='Texte de la réponse')),
                ('est_correcte', models.BooleanField(default=False, help_text='Cette réponse est-elle correcte ?')),
                ('explication', models.TextField(blank=True, help_text='Explication pour cette réponse (optionnel)', null=True)),
                ('ordre', models.PositiveIntegerField(default=1, help_text="Ordre d'affichage")),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reponses', to='celica_web.question')),
            ],
            options={
                'verbose_name': 'Réponse',
                'verbose_name_plural': 'Réponses',
                'ordering': ['ordre', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('duree', models.PositiveIntegerField(help_text='Durée en minutes')),
                ('bareme', models.FloatField(help_text='Barème total du test')),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('instructeur', models.ForeignKey(limit_choices_to={'role__in': ['instructeur', 'admin']}, on_delete=django.db.models.deletion.CASCADE, related_name='tests_crees', to=settings.AUTH_USER_MODEL)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='celica_web.module')),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Tests',
                'ordering': ['-date_creation'],
                'permissions': [('gerer_tests', 'Peut gérer les tests'), ('passer_tests', 'Peut passer des tests')],
            },
        ),
        migrations.CreateModel(
            name='Statistiques',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taux_reussite', models.FloatField(help_text='Taux de réussite en pourcentage')),
                ('periode_debut', models.DateTimeField()),
                ('periode_fin', models.DateTimeField()),
                ('nombre_participants', models.PositiveIntegerField(default=0)),
                ('score_moyen', models.FloatField(blank=True, null=True)),
                ('score_median', models.FloatField(blank=True, null=True)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statistiques', to='celica_web.test')),
            ],
            options={
                'verbose_name': 'Statistique',
                'verbose_name_plural': 'Statistiques',
                'ordering': ['-periode_fin'],
            },
        ),
        migrations.CreateModel(
            name='Resultat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(help_text='Score obtenu')),
                ('note_sur_20', models.FloatField(blank=True, help_text='Note ramenée sur 20', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('appreciation', models.CharField(choices=[('excellent', 'Excellent (18-20)'), ('tres_bien', 'Très bien (16-17)'), ('bien', 'Bien (14-15)'), ('assez_bien', 'Assez bien (12-13)'), ('passable', 'Passable (10-11)'), ('insuffisant', 'Insuffisant (0-9)')], max_length=20)),
                ('temps_ecoule', models.PositiveIntegerField(blank=True, help_text='Temps écoulé en minutes', null=True)),
                ('temps_passe', models.PositiveIntegerField(blank=True, help_text='Temps passé sur le test en minutes', null=True)),
                ('date_passation', models.DateTimeField(default=django.utils.timezone.now)),
                ('commentaires', models.TextField(blank=True, null=True)),
                ('apprenant', models.ForeignKey(limit_choices_to={'role': 'apprenant'}, on_delete=django.db.models.deletion.CASCADE, related_name='resultats', to=settings.AUTH_USER_MODEL)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resultats', to='celica_web.test')),
            ],
            options={
                'verbose_name': 'Résultat',
                'verbose_name_plural': 'Résultats',
                'ordering': ['-date_passation'],
                'permissions': [('consulter_resultats', 'Peut consulter les résultats'), ('modifier_resultats', 'Peut modifier les résultats')],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(blank=True, help_text='Test spécifique (optionnel)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='celica_web.test'),
        ),
        migrations.CreateModel(
            name='Planning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(help_text='Titre du planning', max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_debut', models.DateTimeField(help_text='Date et heure de début')),
                ('date_fin', models.DateTimeField(help_text='Date et heure de fin')),
                ('statut', models.CharField(choices=[('planifie', 'Planifié'), ('en_cours', 'En cours'), ('termine', 'Terminé'), ('annule', 'Annulé'), ('reporte', 'Reporté')], default='planifie', max_length=20)),
                ('materiel_requis', models.TextField(blank=True, null=True)),
                ('lieu', models.CharField(blank=True, help_text='Lieu où se déroule la session', max_length=200, null=True)),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('groupe', models.ForeignKey(blank=True, help_text='Groupe concerné par ce planning', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plannings', to='celica_web.groupe')),
                ('instructeur_responsable', models.ForeignKey(blank=True, help_text='Instructeur responsable du planning', limit_choices_to={'role__in': ['instructeur', 'admin']}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plannings_responsable', to=settings.AUTH_USER_MODEL)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plannings', to='celica_web.test')),
            ],
            options={
                'verbose_name': 'Planning',
                'verbose_name_plural': 'Plannings',
                'ordering': ['-date_debut'],
                'permissions': [('gerer_plannings', 'Peut gérer les plannings'), ('consulter_plannings', 'Peut consulter les plannings')],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('type_notice', models.CharField(choices=[('info', 'Information'), ('test', 'Nouveau test'), ('resultat', 'Résultat disponible'), ('planning', 'Modification de planning'), ('cours', 'Nouveau cours'), ('urgence', 'Urgent')], default='info', max_length=20)),
                ('priorite', models.CharField(choices=[('basse', 'Basse'), ('normale', 'Normale'), ('haute', 'Haute'), ('critique', 'Critique')], default='normale', max_length=20)),
                ('date_expiration', models.DateTimeField(blank=True, help_text="Date d'expiration de la notification", null=True)),
                ('date_envoi', models.DateTimeField(default=django.utils.timezone.now)),
                ('est_lue', models.BooleanField(default=False)),
                ('instructeur', models.ForeignKey(blank=True, help_text='Instructeur expéditeur', limit_choices_to={'role__in': ['instructeur', 'admin']}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications_instructeur', to=settings.AUTH_USER_MODEL)),
                ('module', models.ForeignKey(blank=True, help_text='Module concerné', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='celica_web.module')),
                ('utilisateur', models.ForeignKey(blank=True, help_text='Destinataire de la notification', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications_recues', to=settings.AUTH_USER_MODEL)),
                ('resultat', models.ForeignKey(blank=True, help_text='Résultat concerné', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='celica_web.resultat')),
                ('test', models.ForeignKey(blank=True, help_text='Test concerné', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='celica_web.test')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-date_envoi'],
                'permissions': [('gerer_notifications', 'Peut gérer les notifications'), ('consulter_notifications', 'Peut consulter les notifications')],
            },
        ),
        migrations.AddIndex(
            model_name='utilisateur',
            index=models.Index(fields=['last_name', 'first_name', 'email'], name='celica_web__last_na_7ef2dd_idx'),
        ),
        migrations.AddIndex(
            model_name='utilisateur',
            index=models.Index(fields=['role'], name='celica_web__role_fe6149_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='resultat',
            unique_together={('test', 'apprenant')},
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['type_question', 'niveau_difficulte'], name='celica_web__type_qu_135a4a_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['module', 'test'], name='celica_web__module__3e05de_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['instructeur', 'actif'], name='celica_web__instruc_015cc2_idx'),
        ),
        migrations.AddIndex(
            model_name='planning',
            index=models.Index(fields=['date_debut', 'date_fin'], name='celica_web__date_de_3538de_idx'),
        ),
        migrations.AddIndex(
            model_name='planning',
            index=models.Index(fields=['statut', 'groupe'], name='celica_web__statut_bef14e_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['utilisateur', 'est_lue'], name='celica_web__utilisa_5ef1ad_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['type_notice', 'priorite'], name='celica_web__type_no_56e48b_idx'),
        ),
    ]
