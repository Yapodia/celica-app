# Generated by Django 5.2.1 on 2025-07-01 12:09

from django.db import migrations
from django.utils import timezone


def fix_planning_table_structure(apps, schema_editor):
    """
    Corrige la structure de la table celica_web_planning pour la faire correspondre au mod√®le
    """
    with schema_editor.connection.cursor() as cursor:
        print("üîß Correction de la structure de la table celica_web_planning...")
        
        # 1. Ajouter la colonne description
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_planning'
            AND COLUMN_NAME = 'description'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_planning 
                ADD COLUMN description TEXT NULL
            """)
            print("‚úÖ Colonne 'description' ajout√©e")
        
        # 2. Ajouter la colonne materiel_requis
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_planning'
            AND COLUMN_NAME = 'materiel_requis'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_planning 
                ADD COLUMN materiel_requis TEXT NULL
            """)
            print("‚úÖ Colonne 'materiel_requis' ajout√©e")
        
        # 3. Ajouter la colonne date_creation
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_planning'
            AND COLUMN_NAME = 'date_creation'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_planning 
                ADD COLUMN date_creation DATETIME(6) NOT NULL DEFAULT '{}'
            """.format(timezone.now().strftime('%Y-%m-%d %H:%M:%S.%f')))
            print("‚úÖ Colonne 'date_creation' ajout√©e")
        
        # 4. Ajouter la colonne date_modification
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_planning'
            AND COLUMN_NAME = 'date_modification'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_planning 
                ADD COLUMN date_modification DATETIME(6) NOT NULL DEFAULT '{}'
            """.format(timezone.now().strftime('%Y-%m-%d %H:%M:%S.%f')))
            print("‚úÖ Colonne 'date_modification' ajout√©e")
        
        # 5. Renommer instructeur_id en instructeur_responsable_id si n√©cessaire
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_planning'
            AND COLUMN_NAME = 'instructeur_id'
        """)
        
        has_instructeur_id = cursor.fetchone()[0] > 0
        
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_planning'
            AND COLUMN_NAME = 'instructeur_responsable_id'
        """)
        
        has_instructeur_responsable_id = cursor.fetchone()[0] > 0
        
        if has_instructeur_id and not has_instructeur_responsable_id:
            cursor.execute("""
                ALTER TABLE celica_web_planning 
                CHANGE COLUMN instructeur_id instructeur_responsable_id BIGINT(20) NULL
            """)
            print("‚úÖ Colonne 'instructeur_id' renomm√©e en 'instructeur_responsable_id'")
        elif not has_instructeur_responsable_id:
            cursor.execute("""
                ALTER TABLE celica_web_planning 
                ADD COLUMN instructeur_responsable_id BIGINT(20) NULL
            """)
            print("‚úÖ Colonne 'instructeur_responsable_id' ajout√©e")
        
        # 6. Supprimer les colonnes obsol√®tes si elles existent
        obsolete_columns = ['is_published']
        
        for col in obsolete_columns:
            cursor.execute("""
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = DATABASE()
                AND TABLE_NAME = 'celica_web_planning'
                AND COLUMN_NAME = '{}'
            """.format(col))
            
            if cursor.fetchone()[0] > 0:
                cursor.execute("""
                    ALTER TABLE celica_web_planning 
                    DROP COLUMN {}
                """.format(col))
                print(f"‚úÖ Colonne obsol√®te '{col}' supprim√©e")
        
        print("üéØ Structure de la table celica_web_planning corrig√©e avec succ√®s!")


def reverse_fix_planning_table_structure(apps, schema_editor):
    """
    Fonction de rollback (optionnelle)
    """
    print("‚ö†Ô∏è  Rollback de la correction de structure Planning non impl√©ment√©")


class Migration(migrations.Migration):

    dependencies = [
        ('celica_web', '0016_fix_all_resultat_columns'),
    ]

    operations = [
        migrations.RunPython(
            fix_planning_table_structure,
            reverse_fix_planning_table_structure,
        ),
    ]
