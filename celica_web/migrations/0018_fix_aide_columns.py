# Generated by Django 5.2.1 on 2025-07-01 12:18

from django.db import migrations
from django.utils import timezone


def fix_aide_table_structure(apps, schema_editor):
    """
    Corrige la structure de la table celica_web_aide pour la faire correspondre au mod√®le
    """
    with schema_editor.connection.cursor() as cursor:
        print("üîß Correction de la structure de la table celica_web_aide...")
        
        # 1. Ajouter la colonne mots_cles
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_aide'
            AND COLUMN_NAME = 'mots_cles'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_aide 
                ADD COLUMN mots_cles VARCHAR(200) DEFAULT ''
            """)
            print("‚úÖ Colonne 'mots_cles' ajout√©e")
        
        # 2. Ajouter la colonne ordre_affichage
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_aide'
            AND COLUMN_NAME = 'ordre_affichage'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_aide 
                ADD COLUMN ordre_affichage INT UNSIGNED NOT NULL DEFAULT 1
            """)
            print("‚úÖ Colonne 'ordre_affichage' ajout√©e")
        
        # 3. Ajouter la colonne visible
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_aide'
            AND COLUMN_NAME = 'visible'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_aide 
                ADD COLUMN visible TINYINT(1) NOT NULL DEFAULT 1
            """)
            print("‚úÖ Colonne 'visible' ajout√©e")
        
        # 4. Ajouter la colonne date_creation
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_aide'
            AND COLUMN_NAME = 'date_creation'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_aide 
                ADD COLUMN date_creation DATETIME(6) NOT NULL DEFAULT '{}'
            """.format(timezone.now().strftime('%Y-%m-%d %H:%M:%S.%f')))
            print("‚úÖ Colonne 'date_creation' ajout√©e")
        
        # 5. Ajouter la colonne date_modification
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_aide'
            AND COLUMN_NAME = 'date_modification'
        """)
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                ALTER TABLE celica_web_aide 
                ADD COLUMN date_modification DATETIME(6) NOT NULL DEFAULT '{}'
            """.format(timezone.now().strftime('%Y-%m-%d %H:%M:%S.%f')))
            print("‚úÖ Colonne 'date_modification' ajout√©e")
        
        # 6. Renommer date_publication en date_creation si n√©cessaire (migration de donn√©es)
        cursor.execute("""
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'celica_web_aide'
            AND COLUMN_NAME = 'date_publication'
        """)
        
        has_date_publication = cursor.fetchone()[0] > 0
        
        if has_date_publication:
            # Migrer les donn√©es de date_publication vers date_creation s'il n'existe pas d√©j√†
            cursor.execute("""
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = DATABASE()
                AND TABLE_NAME = 'celica_web_aide'
                AND COLUMN_NAME = 'date_creation'
            """)
            
            has_date_creation = cursor.fetchone()[0] > 0
            
            if not has_date_creation:
                cursor.execute("""
                    ALTER TABLE celica_web_aide 
                    CHANGE COLUMN date_publication date_creation DATETIME(6) NOT NULL
                """)
                print("‚úÖ Colonne 'date_publication' renomm√©e en 'date_creation'")
            else:
                # Si date_creation existe d√©j√†, supprimer date_publication
                cursor.execute("""
                    ALTER TABLE celica_web_aide 
                    DROP COLUMN date_publication
                """)
                print("‚úÖ Colonne obsol√®te 'date_publication' supprim√©e")
        
        # 7. Modifier la colonne categorie pour correspondre au mod√®le (VARCHAR(20))
        cursor.execute("""
            ALTER TABLE celica_web_aide 
            MODIFY COLUMN categorie VARCHAR(20) NOT NULL DEFAULT 'general'
        """)
        print("‚úÖ Colonne 'categorie' mise √† jour")
        
        print("üéØ Structure de la table celica_web_aide corrig√©e avec succ√®s!")


def reverse_fix_aide_table_structure(apps, schema_editor):
    """
    Fonction de rollback (optionnelle)
    """
    print("‚ö†Ô∏è  Rollback de la correction de structure Aide non impl√©ment√©")


class Migration(migrations.Migration):

    dependencies = [
        ('celica_web', '0017_fix_planning_columns'),
    ]

    operations = [
        migrations.RunPython(
            fix_aide_table_structure,
            reverse_fix_aide_table_structure,
        ),
    ]
