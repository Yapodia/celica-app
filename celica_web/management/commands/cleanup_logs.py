from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from celica_web.models import TestEventLog, SecurityViolation, Notification
from django.db import models

class Command(BaseCommand):
    help = 'Nettoie automatiquement les anciens logs et notifications'

    def add_arguments(self, parser):
        parser.add_argument(
            '--days',
            type=int,
            default=30,
            help='Nombre de jours √† conserver (d√©faut: 30)'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Affiche ce qui serait supprim√© sans le faire'
        )

    def handle(self, *args, **options):
        days = options['days']
        dry_run = options['dry_run']
        cutoff_date = timezone.now() - timedelta(days=days)

        self.stdout.write(f"üßπ Nettoyage des donn√©es de plus de {days} jours...")
        self.stdout.write(f"üìÖ Date limite: {cutoff_date.strftime('%d/%m/%Y %H:%M')}")

        # 1. Nettoyer les √©v√©nements de test
        test_events = TestEventLog.objects.filter(timestamp__lt=cutoff_date)
        test_events_count = test_events.count()
        
        if dry_run:
            self.stdout.write(f"üìù √âv√©nements de test √† supprimer: {test_events_count}")
        else:
            test_events.delete()
            self.stdout.write(f"‚úÖ {test_events_count} √©v√©nements de test supprim√©s")

        # 2. Nettoyer les violations de s√©curit√© (garder plus longtemps)
        security_cutoff = timezone.now() - timedelta(days=days * 2)  # 60 jours par d√©faut
        violations = SecurityViolation.objects.filter(timestamp__lt=security_cutoff)
        violations_count = violations.count()
        
        if dry_run:
            self.stdout.write(f"üö® Violations de s√©curit√© √† supprimer: {violations_count}")
        else:
            violations.delete()
            self.stdout.write(f"‚úÖ {violations_count} violations de s√©curit√© supprim√©es")

        # 3. Nettoyer les notifications expir√©es
        expired_notifications = Notification.objects.filter(
            models.Q(date_expiration__lt=timezone.now()) |
            models.Q(date_envoi__lt=cutoff_date, est_lue=True)
        )
        notifications_count = expired_notifications.count()
        
        if dry_run:
            self.stdout.write(f"üîî Notifications √† supprimer: {notifications_count}")
        else:
            expired_notifications.delete()
            self.stdout.write(f"‚úÖ {notifications_count} notifications supprim√©es")

        if dry_run:
            self.stdout.write(self.style.WARNING("üîç Mode test - Aucune donn√©e supprim√©e"))
        else:
            self.stdout.write(self.style.SUCCESS("üéâ Nettoyage termin√© avec succ√®s!")) 